[project]
name = "nifimcp_server"
version = "0.1.0"
description = "MCP Server for Apache NiFi"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"} # Or your preferred license
authors = [
    {name = "Utkarsh Singh", email = "you@example.com"}, # Replace with your details
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License", # Or your preferred license
    "Operating System :: OS Independent",
    "Framework :: FastAPI", # FastMCP is FastAPI-based
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
    "mcp[cli]", # Assuming a version, adjust as per your SDK
    "fastmcp",
    "httpx>=0.27.0",
    "pydantic>=2.7.0",
    "pydantic-settings>=2.3.0", # Updated based on newer SDK examples
    # Add other core dependencies if any emerge
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.4.0",
    "uv>=0.1.40", # For uv commands if you want to pin it
]

[project.scripts]
nifimcp-server = "nifimcp_server.app:mcp_app_for_cli" # We'll define this entry point later in app.py for `mcp run`

[build-system]
# requires = ["hatchling>=1.22.0", "uv-dynamic-versioning>=1.0.0"] # Old line
requires = ["hatchling>=1.22.0", "uv-dynamic-versioning<=0.8.2"] # New line
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"
# [tool.uv-dynamic-versioning] # Potentially remove this section if 0.8.2 doesn't use it
# vcs = "git"
# style = "pep440"
# bump = true


[tool.hatch.build.targets.wheel]
packages = ["src/nifimcp_server"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "C4", "ASYNC", "B", "A"]
ignore = [] # Add specific ignores if needed, e.g. B008 for Pydantic default factories

[tool.pyright]
configFilePath = "pyproject.toml"
include = ["src"]
exclude = [".venv"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.10"
reportMissingImports = true
reportMissingTypeStubs = false
strict = ["*"] # Enable strict mode for all files
typeCheckingMode = "off"
reportUndefinedVariable = false

[tool.pyright.diagnosticSeverityOverrides]
reportArgumentType = "none"
